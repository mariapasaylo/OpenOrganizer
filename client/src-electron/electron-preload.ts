/**
 * This file is used specifically for security reasons.
 * Here you can access Nodejs stuff and inject functionality into
 * the renderer thread (accessible there through the "window" object)
 *
 * WARNING!
 * If you import anything from node_modules, then make sure that the package is specified
 * in package.json > dependencies and NOT in devDependencies
 *
 * Example (injects window.myAPI.doAThing() into renderer thread):
 *
 *   import { contextBridge } from 'electron'
 *
 *   contextBridge.exposeInMainWorld('myAPI', {
 *     doAThing: () => {}
 *   })
 *
 * WARNING!
 * If accessing Node functionality (like importing @electron/remote) then in your
 * electron-main.ts you will need to set the following when you instantiate BrowserWindow:
 *
 * mainWindow = new BrowserWindow({
 *   // ...
 *   webPreferences: {
 *     // ...
 *     sandbox: false // <-- to be able to import @electron/remote in preload script
 *   }
 * }
 *
 * This file was automatically generated by Quasar.
 *
 * Authors: Kevin Sirantoine, Rachel Patella, Maria Pasaylo
 * Created: 2025-04-13
 * Updated: 2025-10-28
 *
 * This file exposes APIs to the renderer via the contextBridge.
 *
 *
 * This file is a part of OpenOrganizer.
 * This file and all source code within it are governed by the copyright and license terms outlined in the LICENSE file located in the top-level directory of this distribution.
 * No part of OpenOrganizer, including this file, may be reproduced, modified, distributed, or otherwise used except in accordance with the terms specified in the LICENSE file.
 **/
import { contextBridge, ipcRenderer } from 'electron';
import type {
  Note,
  Extension,
  Folder,
  Reminder,
  DailyReminder,
  WeeklyReminder,
  MonthlyReminder,
  YearlyReminder,
  Deleted,
  RangeWindow
} from "app/src-electron/types/shared-types";
import { loginAccount } from './services/auth';

contextBridge.exposeInMainWorld('sqliteAPI', {
  // create
  createNote: (newNote: Note): Promise<void> => ipcRenderer.invoke('createNote', newNote),
  createReminder: (newRem: Reminder): Promise<void> => ipcRenderer.invoke('createReminder', newRem),
  createDailyReminder: (newDailyRem: DailyReminder): Promise<void> => ipcRenderer.invoke('createDailyReminder', newDailyRem),
  createWeeklyReminder: (newWeeklyRem: WeeklyReminder): Promise<void> => ipcRenderer.invoke('createWeeklyReminder', newWeeklyRem),
  createMonthlyReminder: (newMonthlyRem: MonthlyReminder): Promise<void> => ipcRenderer.invoke('createMonthlyReminder', newMonthlyRem),
  createYearlyReminder: (newYearlyRem: YearlyReminder): Promise<void> => ipcRenderer.invoke('createYearlyReminder', newYearlyRem),
  createExtension: (newExt: Extension): Promise<void> => ipcRenderer.invoke('createExtension', newExt),
  createFolder: (newFolder: Folder): Promise<void> => ipcRenderer.invoke('createFolder', newFolder),
  createDeleted: (newDeleted: Deleted): Promise<void> => ipcRenderer.invoke('createDeleted', newDeleted),

  // read
  readNote: (itemID: bigint): Promise<Note> => ipcRenderer.invoke('readNote', itemID),
  readReminder: (itemID: bigint): Promise<Reminder> => ipcRenderer.invoke('readReminder', itemID),
  readDailyReminder: (itemID: bigint): Promise<DailyReminder> => ipcRenderer.invoke('readDailyReminder', itemID),
  readWeeklyReminder: (itemID: bigint): Promise<WeeklyReminder> => ipcRenderer.invoke('readWeeklyReminder', itemID),
  readMonthlyReminder: (itemID: bigint): Promise<MonthlyReminder> => ipcRenderer.invoke('readMonthlyReminder', itemID),
  readYearlyReminder: (itemID: bigint): Promise<YearlyReminder> => ipcRenderer.invoke('readYearlyReminder', itemID),
  readExtensions: (itemID: bigint): Promise<Extension[]> => ipcRenderer.invoke('readExtensions', itemID),
  readFolder: (folderID: bigint): Promise<Folder> => ipcRenderer.invoke('readFolder', folderID),

  readNotesInRange: (windowStartMs: bigint, windowEndMs: bigint): Promise<Note[]> => ipcRenderer.invoke('readNotesInRange', windowStartMs, windowEndMs),
  readRemindersInRange: (rangeWindow: RangeWindow): Promise<Reminder[]> => ipcRenderer.invoke('readRemindersInRange', rangeWindow),
  readDailyRemindersInRange: (rangeWindow: RangeWindow): Promise<DailyReminder[]> => ipcRenderer.invoke('readDailyRemindersInRange', rangeWindow),
  readWeeklyRemindersInRange: (rangeWindow: RangeWindow): Promise<WeeklyReminder[]> => ipcRenderer.invoke('readWeeklyRemindersInRange', rangeWindow),
  readMonthlyRemindersInRange: (rangeWindow: RangeWindow): Promise<MonthlyReminder[]> => ipcRenderer.invoke('readMonthlyRemindersInRange', rangeWindow),
  readYearlyRemindersInRange: (rangeWindow: RangeWindow): Promise<YearlyReminder[]> => ipcRenderer.invoke('readYearlyRemindersInRange', rangeWindow),

  readAllFolders: (): Promise<Folder[]> => ipcRenderer.invoke('readAllFolders'),

  readNotesInFolder: (folderID: bigint): Promise<{ itemID: bigint }[]> => ipcRenderer.invoke('readNotesInFolder', folderID),
  readRemindersInFolder: (folderID: bigint): Promise<{ itemID: bigint }[]> => ipcRenderer.invoke('readRemindersInFolder', folderID),
  readDailyRemindersInFolder: (folderID: bigint): Promise<{ itemID: bigint }[]> => ipcRenderer.invoke('readDailyRemindersInFolder', folderID),
  readWeeklyRemindersInFolder: (folderID: bigint): Promise<{ itemID: bigint }[]> => ipcRenderer.invoke('readWeeklyRemindersInFolder', folderID),
  readMonthlyRemindersInFolder: (folderID: bigint): Promise<{ itemID: bigint }[]> => ipcRenderer.invoke('readMonthlyRemindersInFolder', folderID),
  readYearlyRemindersInFolder: (folderID: bigint): Promise<{ itemID: bigint }[]> => ipcRenderer.invoke('readYearlyRemindersInFolder', folderID),
  readFoldersInFolder: (parentFolderID: bigint): Promise<{ folderID: bigint }[]> => ipcRenderer.invoke('readFoldersInFolder', parentFolderID),

  // update
  updateNote: (modNote: Note): Promise<void> => ipcRenderer.invoke('updateNote', modNote),
  updateReminder: (modRem: Reminder): Promise<void> => ipcRenderer.invoke('updateReminder', modRem),
  updateDailyReminder: (modDailyRem: DailyReminder): Promise<void> => ipcRenderer.invoke('updateDailyReminder', modDailyRem),
  updateWeeklyReminder: (modWeeklyRem: WeeklyReminder): Promise<void> => ipcRenderer.invoke('updateWeeklyReminder', modWeeklyRem),
  updateMonthlyReminder: (modMonthlyRem: MonthlyReminder): Promise<void> => ipcRenderer.invoke('updateMonthlyReminder', modMonthlyRem),
  updateYearlyReminder: (modYearlyRem: YearlyReminder): Promise<void> => ipcRenderer.invoke('updateYearlyReminder', modYearlyRem),
  updateFolder: (modFolder: Folder): Promise<void> => ipcRenderer.invoke('updateFolder', modFolder),

  // delete
  deleteNote: (itemID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteNote', itemID),
  deleteReminder: (itemID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteReminder', itemID),
  deleteDailyReminder: (itemID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteDailyReminder', itemID),
  deleteWeeklyReminder: (itemID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteWeeklyReminder', itemID),
  deleteMonthlyReminder: (itemID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteMonthlyReminder', itemID),
  deleteYearlyReminder: (itemID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteYearlyReminder', itemID),
  deleteExtension: (itemID: bigint, sequenceNum: number): Promise<void> => ipcRenderer.invoke('deleteExtension', itemID, sequenceNum),
  deleteAllExtensions: (itemID: bigint): Promise<void> => ipcRenderer.invoke('deleteAllExtensions', itemID),
  deleteFolder: (folderID: bigint): Promise<boolean> => ipcRenderer.invoke('deleteFolder', folderID),
  clearAllTables: (): Promise<void> => ipcRenderer.invoke('clearAllTables'),

  // Example functions
  sqliteCreate: (key: string, value: string) => ipcRenderer.invoke('sqliteCreate', key, value),
  sqliteRead: (key: string) => ipcRenderer.invoke('sqliteRead', key),
  sqliteUpdate: (key: string, value: string) => ipcRenderer.invoke('sqliteUpdate', key, value),
  sqliteDelete: (key: string) => ipcRenderer.invoke('sqliteDelete', key),
});

contextBridge.exposeInMainWorld('electronStoreAPI', {
  getStoreName: () => ipcRenderer.invoke('getStoreName'),
  setStoreName: (name: string) => ipcRenderer.invoke('setStoreName', name)
});

contextBridge.exposeInMainWorld('reminderNotificationAPI', {
  showReminderNotification: (reminder: { title: string; date: string }) => ipcRenderer.invoke('showReminderNotification', reminder),
  scheduleReminderNotification: (reminder: { itemID: bigint; date: string; title: string; time?: string; unixMilliseconds?: number }) => ipcRenderer.invoke('scheduleReminderNotification', reminder)
});

contextBridge.exposeInMainWorld('electronAuthAPI', {
  createAccount: (username: string, password: string) => ipcRenderer.invoke('createAccount', username, password),
  loginAccount: (username: string, password: string) => ipcRenderer.invoke('loginAccount', username, password)
});


